{
	"compiler": {
		"version": "0.8.13+commit.abaa5c0e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "OperatorNotAllowed",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "baseURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "tokenByIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "tokenOfOwnerByIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"balanceOf(address)": {
					"details": "See {IERC721-balanceOf}."
				},
				"baseURI()": {
					"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
				},
				"getApproved(uint256)": {
					"details": "See {IERC721-getApproved}."
				},
				"isApprovedForAll(address,address)": {
					"details": "See {IERC721-isApprovedForAll}."
				},
				"name()": {
					"details": "See {IERC721Metadata-name}."
				},
				"ownerOf(uint256)": {
					"details": "See {IERC721-ownerOf}."
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"setApprovalForAll(address,bool)": {
					"details": "See {IERC721-setApprovalForAll}."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
				},
				"symbol()": {
					"details": "See {IERC721Metadata-symbol}."
				},
				"tokenByIndex(uint256)": {
					"details": "See {IERC721Enumerable-tokenByIndex}."
				},
				"tokenOfOwnerByIndex(address,uint256)": {
					"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
				},
				"tokenURI(uint256)": {
					"details": "See {IERC721Metadata-tokenURI}."
				},
				"totalSupply()": {
					"details": "See {IERC721Enumerable-totalSupply}."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC721-transferFrom}."
				}
			},
			"title": "ExampleERC721",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "This example contract is configured to use the DefaultOperatorFilterer, which automatically registers the         token and subscribes it to OpenSea's curated filters.         Adding the onlyAllowedOperator modifier to the transferFrom and both safeTransferFrom methods ensures that         the msg.sender (operator) is allowed by the OperatorFilterRegistry. Adding the onlyAllowedOperatorApproval         modifier to the approval methods ensures that owners do not approve operators that are not allowed.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"extensions/operator-filter/ContractAbstract.sol": "OnChainERC721"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"extensions/operator-filter/ContractAbstract.sol": {
			"keccak256": "0x88e635625e4f7e5606e54f0fb5745ca42c317f1279aab67a2690398f6670db4f",
			"license": "MIT",
			"urls": [
				"bzz-raw://3a7957c97f8fbf8295f2ccd3c3b72ad70fd436214ce191401cdac1c7803f347b",
				"dweb:/ipfs/QmQ4iHAYZNRbgVTA4VfRJSW4uE9tXDiuKWevvmK8qhD2W8"
			]
		},
		"extensions/operator-filter/DefaultOperatorFilterer.sol": {
			"keccak256": "0x1d6616260cb0fa3a3c56c9db3c29b1db6037d0f30049dca5e94b4896999df991",
			"license": "MIT",
			"urls": [
				"bzz-raw://dd672610b2df718151182ded4dac2c22be41ca2c3e981c2b2449c11bebcde1c6",
				"dweb:/ipfs/QmNN4v58xrk1UtLbM5QHHNHaXShBv5fGXy7U2EhWWDXjj8"
			]
		},
		"extensions/operator-filter/IOperatorFilterRegistry.sol": {
			"keccak256": "0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba",
			"license": "MIT",
			"urls": [
				"bzz-raw://eced709a040d7a4508174e96baa5cb8e9c323b10708be26ba1860945fe5aaac2",
				"dweb:/ipfs/QmPd5q5JioYG4JeYYoRyQYSjHEwddfjXyxtgDKpeNyefYU"
			]
		},
		"extensions/operator-filter/OperatorFilterer.sol": {
			"keccak256": "0x2db030f6c40669534641dbd8f61ec32b8d4f470eaa9ff94e460e7fb08882c6e2",
			"license": "MIT",
			"urls": [
				"bzz-raw://b861cd47aa33b91214bec9551ca227d7234aa2a0d458ba87ccf75c026fa324aa",
				"dweb:/ipfs/Qmdea3QNEtBXG5KMwHyMysGETgRhn27vQx4Xk3rJCRyuo5"
			]
		},
		"openzeppelin-contracts/GSN/Context.sol": {
			"keccak256": "0x9c5342beaabc260ed2a9c31357dd1860d0957c8604fc1fdd638444d8f2d5e1fd",
			"license": "MIT",
			"urls": [
				"bzz-raw://c3c21f7c2d4f66aad0fadcdee923eb5fa19edb497f6714bfbea296a062b15f57",
				"dweb:/ipfs/QmPEhC47Bg85ScsLgAZoskaSEVp5wReJ5ZxcRiNqqUaBXQ"
			]
		},
		"openzeppelin-contracts/introspection/ERC165.sol": {
			"keccak256": "0x19b899fc37e0c8b11969622da9752f608a9dfbc34e7b84ff8b96882e9d5c6d2c",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6d27a25a6873b86a11535dd60d88fc5cfa5a59364fab394be283b7d0b91f24e",
				"dweb:/ipfs/QmcLwvr6RLxp8baqUKwPxRGAHfa35NrPy5dQuocfX1CSZu"
			]
		},
		"openzeppelin-contracts/introspection/IERC165.sol": {
			"keccak256": "0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4",
			"license": "MIT",
			"urls": [
				"bzz-raw://796ab6e88af7bf0e78def0f059310c903af6a312b565344e0ff524a0f26e81c6",
				"dweb:/ipfs/QmcsVgLgzWdor3UnAztUkXKNGcysm1MPneWksF72AvnwBx"
			]
		},
		"openzeppelin-contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0xcb361149c9475de2fdf62aedbfd242c0162be393f2f96abc35f82d567ae0483a",
			"license": "MIT",
			"urls": [
				"bzz-raw://0fc466fa955d3cb10e008ca2fddb2c80d0a6baf1ec93af6badcc212d5be43068",
				"dweb:/ipfs/QmQ1Za4SQ6HJrWv5FxSwrUaoVmfiy4twQuYgCPc6B3dAAz"
			]
		},
		"openzeppelin-contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5a248f7e5f7520aed9c8179d229acb5c31c3bef702611fed769691b315cd4ed0",
			"license": "MIT",
			"urls": [
				"bzz-raw://320cf66b0fb1a39650fab2d767324b99c13e5d5777f217877b9fa76be7641230",
				"dweb:/ipfs/QmYDuD879MCWkAGPmheaWDpGFXQatPCue7hK3EjjXpSDc9"
			]
		},
		"openzeppelin-contracts/token/ERC721/IERC721Enumerable.sol": {
			"keccak256": "0xb963a99b5eb875a72b388a5e776ed7a748e4e8244137eee6b6b3734bd9f299b7",
			"license": "MIT",
			"urls": [
				"bzz-raw://9439cce311013f48549451ac7a148c74ee67d5572617f340e11c8a1baea402ae",
				"dweb:/ipfs/QmQpH3qXdHKtkVb4hNhiJgaPJUXPYUJRPuBePoNkJAEbH2"
			]
		},
		"openzeppelin-contracts/token/ERC721/IERC721Metadata.sol": {
			"keccak256": "0xed7e5a97848069b11b7199311bcb4b1f3c412c9237337703e752afb0b9970ddf",
			"license": "MIT",
			"urls": [
				"bzz-raw://a78a04467c0b31ef585c848d600c655f3f9ef99f39284b878c881b2df6456478",
				"dweb:/ipfs/QmdufYhAB54DCUKkreBcqugy6S3ofGdfaws7xKnP4hAD7Z"
			]
		},
		"openzeppelin-contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4",
			"license": "MIT",
			"urls": [
				"bzz-raw://48593d699a4ef6b5bd2efb20d37320e69303fd27d4b59a2b6b8a8e563e608456",
				"dweb:/ipfs/QmdAPS8uLrzPJEeFZyJVkwTtaL3KB9jo9wJm1UcoJP55wT"
			]
		},
		"openzeppelin-contracts/utils/Address.sol": {
			"keccak256": "0x96722cac4c57162164cebc9dc7ea24ac98d503c63bb60136808fa0e68fa6a1b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://5e57e6f197fac49777e73e5430a3c24e3816892b439c397141e272c88c39c3ba",
				"dweb:/ipfs/QmRhB3moEGHspqNfAdpj4oDgYv3iKfqgxgSp6PftQDCAbT"
			]
		},
		"openzeppelin-contracts/utils/EnumerableMap.sol": {
			"keccak256": "0xc99bd3e61c4e0b69933f3de3933b5bcef04a43ec8d60187e041d8b592f7bc145",
			"license": "MIT",
			"urls": [
				"bzz-raw://524e77c1d88dc530bac5de9dae07cdd2021c1030c2388469039d415c383bcc24",
				"dweb:/ipfs/QmagJp2aZ4ceVNYHy4oh7WGoCTugsDQURkwTSUytoLZNFt"
			]
		},
		"openzeppelin-contracts/utils/EnumerableSet.sol": {
			"keccak256": "0x71e0d1cc75b67306382e055b789b6d3ffe34a9e2e55380d3c9895a36a42229e1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea28aa69470f0f5bb38095c59d2d68db03fc52faa5640de4486a188ecc168870",
				"dweb:/ipfs/QmdwRX791f2gdkxLfzQLcyx3ZLvSjGd2wdX8gXFi8sH2uW"
			]
		},
		"openzeppelin-contracts/utils/Strings.sol": {
			"keccak256": "0x2114fa0a1b9e8be42a7dda2a3ab3a91e5e122c6922b60c3001ee334ec9767153",
			"license": "MIT",
			"urls": [
				"bzz-raw://a83148824ae9af9bbe3f85d249d756fefd0c4cd597b3f8d04c74fa66caaa4c72",
				"dweb:/ipfs/QmY9WRxb8JShTLnCvWmq6SxNPWfNLPviPhABdfswn9JXqv"
			]
		}
	},
	"version": 1
}
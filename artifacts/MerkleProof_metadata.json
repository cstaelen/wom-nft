{
	"compiler": {
		"version": "0.8.13+commit.abaa5c0e"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"WOM_MERKLE_flat.sol": "MerkleProof"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"WOM_MERKLE_flat.sol": {
			"keccak256": "0x02ff3da5fd21cda692c2b963bb84afe5a8c2af6c3b494b93f0a6020de6b68a2f",
			"license": "MIT",
			"urls": [
				"bzz-raw://f30faa3140469fc1eaf87af7e5bdd92ae8886a8f60449f502c37722e47b075d6",
				"dweb:/ipfs/QmVRW5xBwZHvAq4afhrLxzdpNFaFJ2Ejamx6BXUELdnvDG"
			]
		}
	},
	"version": 1
}